"""
Functions for retrieving summary data from a dataset.
"""
from collections import defaultdict
from datetime import timedelta

from idelib.dataset import Channel
import pandas as pd

from .measurement import ANY, MeasurementType, get_channels


# ============================================================================
# Display formatting functions
# ============================================================================

def format_channel_id(ch):
    """ Function for formatting an `idelib.dataset.Channel` or `SubChannel`
        for display. Renders as only the channel and subchannel IDs (the other
        information is shown in the rest of the table).

        :param ch: The `idelib.dataset.Channel` or `idelib.dataset.SubChannel`
            to format.
        :return: A formatted "channel.subchannel" string.
    """
    try:
        if ch.parent:
            return "%s.%s" % (ch.parent.id, ch.id)
        else:
            return "%s.x" % ch.id

    except (AttributeError, TypeError, ValueError):
        return str(ch)


def format_timedelta(td):
    """ Function for formatting the duration. Somewhat more condensed than
        the standard Pandas formatting.

        :param td: The `pandas.Timedelta` or `datetime.timedelta` to format.
        :return: A formatted time 'duration' string.
    """
    try:
        # NOTE: `components` only exists in pandas `Timedelta`, automatically
        #   converted from `datetime.timedelta` by Pandas.
        c = td.components
        s = "{c.minutes:02d}:{c.seconds:02d}.{c.milliseconds}".format(c=c)
        if c.hours or c.days:
            s = "{c.hours:02d}:{s}".format(c=c, s=s)
            if c.days:
                s = "{c.days}d {s}".format(c=c, s=s)
        return s
    except (AttributeError, TypeError, ValueError):
        return str(td)


def format_timestamp(ts):
    """ Function for formatting start/end timestamps. Somewhat more condensed
        than the standard Pandas formatting.

        :param ts: The timestamps in microseconds. Rendered as integers, since
            `idelib` timestamps have whole microsecond resolution.
        :return: A formatted timestamp string, with units.
    """
    try:
        return "%d Âµs" % ts
    except (AttributeError, TypeError, ValueError):
        return str(ts)

# ============================================================================
#
# ============================================================================


TABLE_STYLE = {
    'channel': format_channel_id,
    'start': format_timestamp,
    'end': format_timestamp,
    'duration': format_timedelta,
    'rate': "{:.2f} Hz",
}


def get_channel_table(dataset, measurement_type=ANY, formatting=None,
                      index=True, precision=4, **kwargs):
    """ Get summary data for all `SubChannel` objects in a `Dataset` that
        contain one or more type of sensor data.

        :param dataset: A `idelib.dataset.Dataset` or a list of
            channels/subchannels from which to build the table.
        :param measurement_type: A `MeasurementType`, a measurement type
            'key' string, or a string of multiple keys generated by adding
            and/or subtracting `MeasurementType` objects to filter the
            results. Any 'subtracted' types will be excluded.
        :param formatting: A dictionary of additional style/formatting
            items (see `pandas.DataFrame.style.format()`).
        :param index: If `True`, show the index column on the left.
        :param precision: The default decimal precision to display. Can
            be changed later.
        :returns: A table (`DataFrame`) of summary data.
        :rtype: pandas.DataFrame
    """
    # We don't support multiple sessions on current Slam Stick/enDAQ recorders,
    # but in the event we ever do, this allows one to be specified like so:
    #       :param session: A `Session` or session ID to retrieve from a
    #           multi-session recording.
    # Leave out of docstring until we ever support it.
    session = kwargs.get('session', None)
    if session:
        session = getattr(session, 'sessionId', session)

    if hasattr(dataset, 'getPlots'):
        sources = get_channels(dataset, measurement_type)
    else:
        sources = dataset

    result = defaultdict(list)
    for source in sources:
        result['channel'].append(source)
        result['name'].append(source.name)
        result['type'].append(source.units[0])
        result['units'].append(source.units[1])

        data = source.getSession(session)
        samples = len(data)
        if samples:
            start = data[0][0]
            end = data[-1][0]
            duration = timedelta(microseconds=end-start)
        else:
            start = end = duration = None
        result['start'].append(start)
        result['end'].append(end)
        result['duration'].append(duration)
        result['samples'].append(samples)
        result['rate'].append(samples / ((end - start) / 10**6))

        dmin, dmean, dmax = data.getRangeMinMeanMax()
        result['min'].append(dmin)
        result['mean'].append(dmean)
        result['max'].append(dmax)

    if formatting is False:
        return pd.DataFrame(result)

    if isinstance(formatting, dict):
        style = TABLE_STYLE.copy()
        style.update(formatting)
    else:
        style = TABLE_STYLE

    styled = pd.DataFrame(result).style.format(style)
    styled.set_precision(precision)
    if not index:
        return styled.hide_index()
    else:
        return styled
